[gd_scene load_steps=11 format=1]

[ext_resource path="res://player/player.gd" type="Script" id=1]
[ext_resource path="res://player/Caio.png" type="Texture" id=2]

[sub_resource type="RectangleShape2D" id=1]

custom_solver_bias = 0.0
extents = Vector2( 7, 13.5 )

[sub_resource type="SegmentShape2D" id=7]

custom_solver_bias = 0.0
a = Vector2( 0, 0 )
b = Vector2( 13, 0 )

[sub_resource type="GDScript" id=8]

script/source = "extends Area2D

export (bool) var dbg = true   setget set_dbg
export (Color) var color = Color(1,1,1)

var dot = preload(\"res://controls/dot.tscn\").instance()
onready var dbg_node = get_node(\"../dbg\")

func set_dbg(value):
	dbg = value
	if dbg:
		set_fixed_process(true)
		if dbg_node: dbg_node.show()
	else:
		set_fixed_process(false)
		dot.hide()
		if dbg_node: dbg_node.hide()

func _ready():
	dot.radius = .5
	dot.color = color.inverted()
	get_tree().get_root().call_deferred(\"add_child\", dot)
	set_dbg(dbg)

func _fixed_process(delta):
	update()

func _draw():
	if is_colliding():
		var collision_point = get_collision_point()
		#var collider = get_collider()
		#print(\"Pos: %s\\tCol: %s\\tNew: %s\" % [get_pos(), collision_point, new_point])
		draw_circle(get_pos(), 1, color)
		dot.set_pos(collision_point)
		dot.show()
	else:
		dot.hide()
		
func is_colliding():
	var bodies = get_overlapping_bodies()
	var over = bool(bodies.size())
	return over

func get_collision_points():
	return []
	# get bodies colliding
		# get it shape and test colision point or raycast"

[sub_resource type="GDScript" id=6]

script/source = "extends RayCast2D

export (bool) var dbg = true   setget set_dbg
export (Color) var color = Color(1,1,1)

var dot = preload(\"res://controls/dot.tscn\").instance()
var dot2 = preload(\"res://controls/dot.tscn\").instance()
onready var dbg_node = get_node(\"../../dbg\")

func set_dbg(value):
	dbg = value
	if dbg:
		set_fixed_process(true)
		if dbg_node: dbg_node.show()
	else:
		set_fixed_process(false)
		dot.hide()
		dot2.hide()
		if dbg_node: dbg_node.hide()

func _ready():
	dot.radius = .5
	dot.color = color.inverted()
	dot2.radius = .5
	dot2.color = color
	get_tree().get_root().call_deferred(\"add_child\", dot)
	get_tree().get_root().call_deferred(\"add_child\", dot2)
	set_dbg(dbg)

func _fixed_process(delta):
	update()

func _draw():
	if is_colliding():
		draw_circle(get_pos(), 1, color)
		var collision_point = get_collision_point()
		var space_state = get_world_2d().get_direct_space_state()
		var from = collision_point + Vector2(0, 0)
		var   to = collision_point + Vector2(0, 3)
		var ray_collisions = space_state.intersect_ray(from, to)
		
		if ray_collisions.size():	#Is really on the floor?
			#var collider = get_collider()
			dot.set_pos(from)
			dot.show()
			dot2.set_pos(to)
			dot2.show()
		#print(\"Pos: %s\\tCol: %s\\tNew: %s\" % [get_pos(), collision_point, new_point])
	else:
		dot.hide()
		dot2.hide()"

[sub_resource type="Animation" id=2]

resource/name = "falling"
length = 1.0
loop = false
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("sprite:frame")
tracks/0/interp = 1
tracks/0/imported = false
tracks/0/keys = {
"times": FloatArray( 0 ),
"transitions": FloatArray( 1 ),
"update": 1,
"values": [ 4 ]
}

[sub_resource type="Animation" id=3]

resource/name = "idle"
length = 9.88
loop = true
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("sprite:frame")
tracks/0/interp = 1
tracks/0/imported = false
tracks/0/keys = {
"times": FloatArray( 0, 3.3, 3.5, 6.7, 6.8 ),
"transitions": FloatArray( 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 5, 6, 5, 6, 5 ]
}

[sub_resource type="Animation" id=4]

resource/name = "jumping"
length = 1.0
loop = false
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("sprite:frame")
tracks/0/interp = 1
tracks/0/imported = false
tracks/0/keys = {
"times": FloatArray( 0 ),
"transitions": FloatArray( 1 ),
"update": 1,
"values": [ 3 ]
}

[sub_resource type="Animation" id=5]

resource/name = "walking"
length = 0.6
loop = true
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath("sprite:frame")
tracks/0/interp = 1
tracks/0/imported = false
tracks/0/keys = {
"times": FloatArray( 0, 0.2, 0.4 ),
"transitions": FloatArray( 1, 1, 1 ),
"update": 1,
"values": [ 1, 0, 2 ]
}

[node name="player" type="KinematicBody2D"]

input/pickable = false
shapes/0/shape = SubResource( 1 )
shapes/0/transform = Matrix32( 1, 0, 0, 1, 0, 0 )
shapes/0/trigger = false
collision/layers = 1
collision/mask = 1
collision/margin = 0.08
script/script = ExtResource( 1 )

[node name="colision" type="CollisionShape2D" parent="."]

shape = SubResource( 1 )
trigger = false
_update_shape_index = 0
__meta__ = {
"_edit_lock_": true
}

[node name="sprite" type="Sprite" parent="."]

texture = ExtResource( 2 )
hframes = 9
frame = 5
__meta__ = {
"_edit_lock_": true
}

[node name="ground_detector" type="Area2D" parent="."]

visibility/visible = false
input/pickable = true
shapes/0/shape = SubResource( 7 )
shapes/0/transform = Matrix32( 1, 0, 0, 1, -6.5, 14 )
shapes/0/trigger = false
gravity_vec = Vector2( 0, 1 )
gravity = 98.0
linear_damp = 0.1
angular_damp = 1.0
script/script = SubResource( 8 )
dbg = true
color = Color( 1, 1, 1, 1 )

[node name="ground_line" type="CollisionShape2D" parent="ground_detector"]

transform/pos = Vector2( -6.5, 14 )
shape = SubResource( 7 )
trigger = false
_update_shape_index = 0

[node name="ground_raysx" type="Node2D" parent="."]

editor/display_folded = true
visibility/visible = false

[node name="ray_1" type="RayCast2D" parent="ground_raysx"]

transform/pos = Vector2( -6, 14 )
enabled = true
cast_to = Vector2( 0, 1 )
layer_mask = 1
type_mask = 15
script/script = SubResource( 6 )
dbg = true
color = Color( 1, 0, 0, 1 )

[node name="ray_2" type="RayCast2D" parent="ground_raysx"]

transform/pos = Vector2( 0, 14 )
enabled = true
cast_to = Vector2( 0, 1 )
layer_mask = 1
type_mask = 15
script/script = SubResource( 6 )
dbg = true
color = Color( 0, 1, 0, 1 )

[node name="ray_3" type="RayCast2D" parent="ground_raysx"]

transform/pos = Vector2( 6, 14 )
enabled = true
cast_to = Vector2( 0, 1 )
layer_mask = 1
type_mask = 15
script/script = SubResource( 6 )
dbg = true
color = Color( 0, 0, 1, 1 )

[node name="ground_rays" type="Node2D" parent="."]

[node name="ray_left" type="RayCast2D" parent="ground_rays"]

transform/pos = Vector2( -6, 14 )
enabled = true
cast_to = Vector2( 13, 0 )
layer_mask = 1
type_mask = 15
script/script = SubResource( 6 )
dbg = true
color = Color( 1, 0, 0, 1 )

[node name="ray_right" type="RayCast2D" parent="ground_rays"]

transform/pos = Vector2( 5, 14 )
enabled = true
cast_to = Vector2( -13, 0 )
layer_mask = 1
type_mask = 15
script/script = SubResource( 6 )
dbg = true
color = Color( 0, 1, 0, 1 )

[node name="anim" type="AnimationPlayer" parent="."]

playback/process_mode = 1
playback/default_blend_time = 0.0
root/root = NodePath("..")
anims/falling = SubResource( 2 )
anims/idle = SubResource( 3 )
anims/jumping = SubResource( 4 )
anims/walking = SubResource( 5 )
playback/active = true
playback/speed = 1.0
blend_times = [  ]
autoplay = "idle"

[node name="dbg" type="Node2D" parent="."]

editor/display_folded = true
__meta__ = {
"_edit_lock_": true
}

[node name="status" type="Label" parent="dbg"]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = -40.0
margin/top = -44.0
margin/right = 40.0
margin/bottom = -30.0
text = "idle"
align = 1
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1


